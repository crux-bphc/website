---
import Footer from "../../components/Footer.astro";
import MemberCard from "../../components/MemberCard.astro";
import MemberCardTabs from "../../components/MemberCardTabs.svelte";
import Navbar from "../../components/Navbar.astro";
import Layout from "../../layouts/Layout.astro";
import data from "../../data/data.json";
import Logo from "../../../public/logoMainPage.svg?raw";

const ALUMNIYEAR = 2021;
const members = data.filter(
  (e) => parseInt(e.highlightedBadges[0] ?? "0") > ALUMNIYEAR,
);
const alumni = data.filter(
  (e) => parseInt(e.highlightedBadges[0] ?? "0") <= ALUMNIYEAR,
);
---

<Layout title="Members">
  <div class="fixed left-0 top-0 size-full bg-background"></div>
  <div class="fixed -right-24 -top-16 z-0 flex opacity-20 blur">
    <div
      class="size-64 text-foreground-bright opacity-45 md:size-72 lg:size-96"
    >
      <Fragment set:html={Logo} />
    </div>
  </div>
  <div class="fixed -bottom-20 -left-20 z-0 flex opacity-20 blur">
    <div
      class="size-64 text-foreground-bright opacity-45 md:size-72 lg:size-96"
    >
      <Fragment set:html={Logo} />
    </div>
  </div>
  <main id="main" class="relative pb-28">
    <Navbar />
    <div class="flex w-full flex-col items-center lg:pt-12 xl:pt-16">
      <MemberCardTabs client:load>
        {
          // first, senate -> member -> enthu (which happens to be reverse alphabetical order)
          // then, descending order of batch
          // then, ascending order of name (for consistency)
          members
            .sort(
              (a, b) =>
                (b.highlightedBadges[1] ?? "").localeCompare(
                  a.highlightedBadges[1] ?? "",
                ) ||
                parseInt(b.highlightedBadges[0] ?? "0") -
                  parseInt(a.highlightedBadges[0] ?? "0") ||
                a.name.localeCompare(b.name),
            )
            .map((member) => (
              <MemberCard
                href={`/members/${member.username}`}
                name={member.name}
                title={member.title}
                highlightedBadges={member.highlightedBadges}
                badges={member.badges}
                imageURL={`/avatars/members/${member.username}`}
                slot="members"
              />
            ))
        }
        {
          alumni
            .sort(
              (a, b) =>
                (b.highlightedBadges[1] ?? "").localeCompare(
                  a.highlightedBadges[1] ?? "",
                ) ||
                parseInt(b.highlightedBadges[0] ?? "0") -
                  parseInt(a.highlightedBadges[0] ?? "0") ||
                a.name.localeCompare(b.name),
            )
            .map((alumnus) => (
              <MemberCard
                href={`/members/${alumnus.username}`}
                name={alumnus.name}
                title={alumnus.title}
                highlightedBadges={alumnus.highlightedBadges}
                badges={alumnus.badges}
                imageURL={`/avatars/members/${alumnus.username}`}
                slot="alumni"
              />
            ))
        }
      </MemberCardTabs>
    </div>
    <Footer />
  </main>
</Layout>
